1. 가장 큰 정사각형 찾기

def solution(board):
    answer = 1234
    lengthY = len(board)
    lengthX = len(board[0])
    a = 0
    if(lengthY < 2 or lengthY < 2):
        for i in range(lengthY):
            for j in range(lengthX):
                if board[i][j] == 1:
                    a = 1
    else:
        for i in range(1, lengthY):
            for j in range(1, lengthX):
                if board[i][j] == 1:
                    board[i][j] = min(board[i - 1][j], board[i][j-1], board[i-1][j-1]) + 1
                    if board[i][j] > a:
                        a = board[i][j]        
        
    return a**2

DP(Dynamic Programming)를 이용해야 한다.
dp matrix의 크기를 정하고 두번째 칸부터 시작해서 위, 왼쪽, 왼쪽위 대각선을 확인하며
맥스값을 변화시키며 매트릭스를 채워간다

2. 피보나치 수
기존 식으로 하면 시간초과가 나와서 튜플을 이용하여 해결하였다.
def solution(n):
    # if n == 0 or n == 1:
    #     return n
    # else:
    #     return solution(n-1) + solution(n-2)
    a, b = 0, 1
    for i in range(n):
        a, b = b, a+b
    return a % 1234567

3. 행렬의 곱셈
첫번째 행렬의 열과 두번째 행렬의 행의 수가 같아야한다.
정답의 빈 행렬을 선언하는 것이 키포인트 인 것 같다.
곱셈공식은 외워둠
def solution(A, B):
    answer = [ len(B[0])*[0] for i in range (len(A)) ]
    for i in range (len(answer) ):
        for j in range ( len(answer[i]) ):
            for k in range ( len(A[i] ) ):
                answer[i][j] += A[i][k]*B[k][j]

    return answer

