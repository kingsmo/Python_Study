Part 1. Markup Languages in Web Services

소켓
> 하나의 앱에서 다른 앱으로 데이터를 보내는 것

네트워크상의 데이터 전송
> PHP / Java / Python 등의 언어에 비종속적인 데이터 타입이 필요하다
> Wire Format
> XML : <> 로 표현된 데이터 타입
> JSON : {  " " } 형태로 표현된 데이터 타입

Part 2. XML : eXtensible Markup Language

XML
> HTML 과 유사하지만, 태그명을 임의로 작성 가능하다
> 태그 / 컨텐츠 / 어트리뷰트 / 시리얼라이즈 ( 직렬화 ) 등의 개념이 존재한다.
> 시작 태그, 끝 태그, 셀프 클로징 태그가존재. 데이터는 태그 사이에 존재함.
> 어트리뷰트는 태그 내부에 존재하며, 키와 밸류로 이루어진다.

> 기본적으로 공백을 무시하지만, 콘텐츠 영역에서는 공백이 중요하다.
> XML 은 계층 구조로 이루어져있다는 점이 중요하다.
> 부모 자식 관계가 존재하며, 태그 콘텐츠로 태그를 작성하여 관계가 이루어진다.

> 하나의 노드는 하나의 콘텐츠와 여러개의 어트리뷰트를 가질 수 있다.
> XML 은 하나의 경로로 생각될 수 있으며, 이를 통해 콘텐츠에 접근 가능하다.

Part 3. XML Schema

XML 스키마
> DTD / XSD 등이 존재한다.
> XML 파일이 어떤 형식인지 지정하는 스키마이다.

XSD 구조
> xs:element
> xs:sequence
> xs:complexType

> XML 파일과 구조를 비교하여 파일에 문제가 있는지 없는지 T/F 로 반환
> minOccurs / maxOccurs 로 노드의 반복 횟수를 지정할 수 있다.

> date / dateTime / decimal / integer 등의 데이터 타입이 존재한다.
> 조건을 지정하여 XML 이 정확한 데이터를 가지는지 확인 가능하다.

> dateTime 에서 Z 는 표준시를 사용함을 의미한다.
> 표준시에서는 위치에 따라 시각이 변화한다.

> ?xml ~ ? : 헤더, xml 파일임을 나타내는 것이다.

Part 4. JSON : JavaScript Object Notation

JSON
> 두 시스템 사이에서 데이터를 이동하기 좋은 형식이다.
> 파이썬의 객체 / 리스트 표현과 유사하다.

파이썬에서의 JSON 처리
> key : value 의 쌍이 존재한다.
> { } 중괄호를 이용해 묶여있다.

import json
> 파이썬에서 json 패키지를 사용한다.

info = json.loads(data)
> json 형태의 스트링 데이터인 data 를 딕셔너리 형태로 info 에 반환한다.
> 중첩된 딕셔너리와 리스트라고 볼 수 있다.
> 2개 이상의 요소를 생성하기 위해 리스트를 사용하는 것이다.






















