Ch15_Database

Part 1: Database

과거의 데이터 저장 : 순차적 ( sequential )

현대의 데이터 저장 : 대량의 데이터 수정 / 삽입 / 삭제 등이 필요하다
> 빠른 속도로 데이터에 접근할 방법 / 다른 데이터와의 연동 등의 문제 해결
= 데이터베이스 시스템의 구현

관계형 데이터베이스
> 강력한 수학적 방법에 기반을 두고 있음
> 효과적인 정렬 방법의 방법으로 기존의 인덱싱 데이터베이스를 대체하게 됨
> 여러 시트의 엑셀이라 생각하면 편하다

SQL : Structured Query Language
> 질의형 언어. 질문에 답을 알려준다. 절차형 언어가 아니다.
> 실제 데이터를 검색하고, 반복하는 과정은 DBMS 가 처리한다.
> Create Read Update Delete CRUD 가 우리가 해야 할 것이다.

SQL 을 활용하여 데이터 분석을 진행할 것이다.

DBA 와 Developer 의 역할 분담
> DBA : 데이터베이스 자체를 관리
> Developer : DB Server 에서 데이터를 가져와 Application 을 관리

다양한 DBMS
Oracle
MySql
SqlServer
MariaDB

SQLite3 로 SQLite 를 파이썬에서 사용 가능하다
> 매우 가벼운 DBMS 이다.


Part 2 : SQL : Structured Query Language

CREATE TABLE 'Users' ('name' TEXT, 'email' TEXT);
> Users 라는 테이블을 생성
> 해당 테이블에는 name 과 email 이 TEXT 형식으로 컬럼이 생성

INSERT INTO Users(name, email) VAVLUES ('Kristin', 'kf@umich.edu')
> Users 테이블에 name, email 이 VALUES 값과 같은 하나의 튜플을 삽입한다.
> 각 줄에 세미콜론을 붙여야 각각이 따로 진행된다.

DELETE FROM Users WHERE email='ted@umich.edu'
> email 이 ted~ 인 튜플을 Users 에서 찾아 삭제한다.

UPDATE Users SET name = 'Charles'
             WHERE email = 'csev@umich.edu'
> email 이 csev~ 인 튜플을 찾아 name 을 Charles 로 변경한다.

SELECT * FROM Users
> Users 테이블의 모든 튜플을 선택하여 출력하라

SELECT * FROM Users WHERE email = 'abc'
> Users 테이블의 email 이 abc 인 값을 찾아 모두 출력하라

SELECT * FROM Users ORDER BY email ( DESC )
> email 을 순차적으로 오름차순 정렬하여 모두 출력하라 ( 혹은 내림차순 )


Part 3 : Complex Models

데이터베이스 디자인
> 원하는 데이터를, 효과적으로 나누어 담아야 한다

음악 관리 프로그램의 예시
> Track / Len / Artist / Album / Genre / Rating / Count
> 팁 : 컬럼을 살펴볼 때, 반복되어 나오는 값들을 주의해서 보라

> 1. User 기준에서 사용 목적을 생각하는 것이 첫번째이다.
> 2. Track / Len / Rating / Count 가 기본이 된다.
> 3. Track 묶음은 Album 에 속하고, Album 은 Artist 에 속한다
> 4. 마지막으로 각 Track 묶음들은 Genre 에 속한다


Part 4 : Relational Database

일단 음악 테이블에서는 id 가 key 가 된다
각각의 Artist 는 id 값을 갖는다
다른 테이블에서 artist_id 로 쓰여진다

Primary key : 의미없는, 구분되는 유일한 값
Logical key : 의미를 갖는 변화 가능한 값
Foreign key : 다른 테이블에서 사용되는 PK

Artist : id* / name
Album : id* / title / artist_id**


Part 5 : Foreign Keys

Track / Genre / Album / Artist
> 크게 네 개의 테이블로 구성된다

Artist : id* / title
Track : id* / title / rating / len / count / album_id** / genre_id**
Album : id* / title / artist_id**
Genre : id* / name

Album 과 Track 을 잇는 album_id 의 관계를 어떻게 표현하는가
> Foreign Key 형식을 이용하여 표현한다.

SQLite 를 이용하여 테이블 생성하기

CREATE TABLE 'Artist'(
    'id' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE
    'name' TEXT )
> id 를 프라이머리키이며, 낫널, 유니크, 자동증가로 생성한다.
> Artist name 을 name 컬럼에 텍스트로 생성한다

CREATE TABLE 'Album'(
    'id' INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
    'artist_id' INTEGER,
    'title' TEXT
    )
> 앨범 테이블의 생성

CREATE TABLE Track(
    id INTEGER NOT NULL PRIMARY KEY AU~
    title
    album_id
    genre_id
    len INTEGER, rating INTEGER, count INTEGER)

> AUTOINCREMENT 명령어는 숫자를 자동으로 증가하며 넣어준다

Artist / Genre -> Album -> Track 순서로 생성해야 한다.
왜냐하면 뒤로 갈수록 앞의 테이블에 종속적이기 때문이다


Part 6 : JOIN

select Album.title, Artist.name from Album join Artist
    on Album.artist_id = Artist.id
> Album 테이블의 artist_id 와 Artist 테이블의 id 값이 동일하도록 이어붙인다
> 하나의 테이블이 만들어지면, 해당 테이블에서 Album 의 title 과 Artist 의 이름을 꺼낸다

ON 문장을 사용하지 않는다면, Cartisian Product 가 이루어진다

select ~ from ~ join ~ on ~
> 여러 개의 테이블을 한 번에 Join 할 수 있다


Part 7 : Many to Many Relationship

다대다 관계에서는 연결 테이블이 새롭게 하나 생성된다.
> 두 개의 Foreign 키가 존재하게 된다
> 예를 들어 학생과 강의의 관계는 다대다 관계이다.
> 이를 표현하기 위해 강의 등록 테이블을 새롭게 생성한다.

강의 등록 관계에서의 표현
> 사용자와 강의를 함께 표현하기 위해서는 사용자 / 강의 / 등록 테이블을
> 한꺼번에 JOIN 하여 값을 뽑아내야 한다.

데이터의 규모가 커질수록, 반드시 정리하여 데이터베이스로 만들어야 한다
> 속도가 훨씬 빠르기 때문이다


Part 8 : 최종 실습



























